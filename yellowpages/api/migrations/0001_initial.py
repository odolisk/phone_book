# Generated by Django 3.2.7 on 2021-09-12 12:17

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(error_messages={'unique': 'Пользователь с таким Email уже существует.'}, help_text='Email адрес. Должен быть уникальным.', max_length=254, unique=True, verbose_name='email')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'Пользователь',
                'verbose_name_plural': 'Пользователи',
                'ordering': ('-id',),
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Organization',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=128, unique=True, verbose_name='Название')),
                ('address', models.TextField(blank=True, verbose_name='Адрес')),
                ('description', models.TextField(blank=True, verbose_name='Описание')),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='organization_author', to=settings.AUTH_USER_MODEL, verbose_name='Создано')),
                ('editors', models.ManyToManyField(blank=True, related_name='organization_editors', to=settings.AUTH_USER_MODEL, verbose_name='Редакторы')),
            ],
            options={
                'verbose_name': 'Организация',
                'verbose_name_plural': 'Организации',
                'ordering': ('name',),
            },
        ),
        migrations.CreateModel(
            name='Employee',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=128, verbose_name='Имя')),
                ('surname', models.CharField(max_length=128, verbose_name='Фамилия')),
                ('middlename', models.CharField(blank=True, max_length=128, verbose_name='Отчество')),
                ('position', models.CharField(blank=True, max_length=128, verbose_name='Должность')),
                ('work_phone', models.CharField(blank=True, max_length=17, validators=[django.core.validators.RegexValidator(message='Формат телефонного номера: "+00000000000".Максимум - 15 цифр (+71234567890).', regex='^\\+?1?\\d{8,15}$')], verbose_name='Рабочий телефон')),
                ('personal_phone', models.CharField(blank=True, max_length=17, null=True, unique=True, validators=[django.core.validators.RegexValidator(message='Формат телефонного номера: "+00000000000".Максимум - 15 цифр (+71234567890).', regex='^\\+?1?\\d{8,15}$')], verbose_name='Личный телефон')),
                ('fax', models.CharField(blank=True, max_length=17, validators=[django.core.validators.RegexValidator(message='Формат телефонного номера: "+00000000000".Максимум - 15 цифр (+71234567890).', regex='^\\+?1?\\d{8,15}$')], verbose_name='Факс')),
                ('organization', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='employees', to='api.organization', verbose_name='Организация')),
            ],
            options={
                'verbose_name': 'Сотрудник',
                'verbose_name_plural': 'Сотрудники',
                'ordering': ('surname', 'name'),
            },
        ),
        migrations.AddIndex(
            model_name='organization',
            index=models.Index(fields=['name'], name='api_organiz_name_d3d16b_idx'),
        ),
        migrations.AddIndex(
            model_name='employee',
            index=models.Index(fields=['name', 'surname', 'middlename', 'work_phone', 'personal_phone', 'fax'], name='api_employe_name_25e575_idx'),
        ),
        migrations.AddConstraint(
            model_name='employee',
            constraint=models.UniqueConstraint(fields=('name', 'surname', 'middlename', 'organization'), name='FIO'),
        ),
    ]
